<?xml version="1.0" encoding="ISO-8859-1"?>
<project>
<name>Axis2.0</name>
  <pomVersion>3</pomVersion>
  <!-- a unique name for this project -->

  <groupId>axis</groupId>
  
  
  <currentVersion>M1</currentVersion>
  
  <!-- details about the organization that 'owns' the project -->
  <organization>
    <name>Apache Software Foundation</name>
    <url>http://www.apache.org/</url>
    <logo>http://www.apache.org/images/asf-logo.gif</logo>
  </organization>
  
  <inceptionYear>2004</inceptionYear>
  <package>org.apache.axis</package>
  <logo>http://ws.apache.org/axis/images/axis.jpg</logo>
  <description> Axis2 is an effort to re-design and totally re-implement both Axis/Java and (eventually) Axis/C++ on a new architecture. Evolving from the now standard "handler chain" model which Axis1 pioneered, Axis2 is developing a more flexible pipeline architecture which can yet be managed and packaged in a more organized manner. This new design acknowledges the maturing of the Web services space â€“ in terms of new protocols such as WS-ReliableMessaging, WS-Security and WS-Addressing that are built on top of the base SOAP system. At the time Axis1 was designed, while it was fully expected that other protocols such as WS-ReliableMessaging would be built on top of it, there was not a proper extension architecture defined to enable clean composition of such layers. Thus, one of the key motivations for Axis2 is to provide a clean and simple environment for like Apache Sandesha [4] and Apache WSS4J [5] to layer on top of the base SOAP system. Another driving force for Axis2 as well as the move away from RPC oriented Web services towards more document-oriented, message style asynchronous service interactions. The Axis2 project is centered on a new representation for SOAP messages called AXIOM (AXIs Object Model). AXIOM consists of two parts: a complete XML Infoset representation and a SOAP Infoset representation on top of that. The XML Infoset representation provides a JDOM-like simple API but is built on a deferred model via a StAX-based (Streaming API for XML) pull parsing API. A key feature of AXIOM is that it allows one to stop building the XML tree and just access the pull stream directly; thus enabling both maximum flexibility and maximum performance. This approach allows us to support multiple levels of abstraction for consuming and offering Web services: using plain AXIOM, using generated code and statically data-bound data types and so on. At the time of Axis1's design, RPC-style, synchronous, request-response interactions were the order of the day for Web services. Today service interactions are much more message-oriented and exploit many different message exchange patterns. The Axis2 engine architecture is careful to not build in any assumptions of request-response patterns to ensure that it can be used easily to support arbitrary message exchange patterns.</description>
  <shortDescription>Axis 2.0</shortDescription>
  <!-- the project home page -->
  <url>http://ws.apache.org/axis2/</url>
  <issueTrackingUrl>http://nagoya.apache.org/jira/secure/BrowseProject.jspa?id=10611</issueTrackingUrl>
  <siteAddress>ws.apache.org/axis2</siteAddress>
  <siteDirectory>/www/axi2.ws.apache.org/</siteDirectory>
  <distributionDirectory>/www/ws.apache.org/builds/</distributionDirectory>
	<repository>
        <connection>scm:subversion:http://svn.apache.org/repos/asf/webservices/axis/trunk</connection>
        <developerConnection>scm:subversion:https://svn.apache.org/repos/asf/webservices/axis/trunk</developerConnection>
        <url>http://svn.apache.org/viewcvs.cgi/webservices/axis/trunk/?root=Apache-SVN</url>
    </repository>
  <mailingLists>
    <mailingList>
      <name>Axis Developer List</name>
      <subscribe>axis-dev-subscribe@ws.apache.org</subscribe>
      <unsubscribe>axis-dev-unsubscribe@ws.apache.org</unsubscribe>
    </mailingList>
  </mailingLists>

  <!-- ========== -->
  <!-- Developers -->
  <!-- ========== -->
  
  <developers>
    <developer>
      <name>Davanum Srinivas</name>
      <id>dims</id>
      <email>dims@apache.org</email>
      <organization></organization>
    </developer>
    <developer>
      <name>Sanjiva Weerawarana</name>
      <id>sanjiva</id>
      <email>sanjiva@apache.org</email>
      <organization></organization>
    </developer>
    <developer>
      <name>Glen Daniels</name>
      <id>gdaniels</id>
      <email>gdaniels@apache.org</email>
      <organization></organization>
    </developer>
    <developer>
      <name>Aleksander Slominski</name>
      <id>alek</id>
      <email>aslom@cs.indiana.edu</email>
      <organization>Indiana University Extreme! Computing Lab</organization>
    </developer>
    <developer>
      <name>Farhaan Mohideen</name>
      <id>farhaan</id>
      <email>farhaan@opensource.lk</email>
      <organization>LSF</organization>
    </developer>
    <developer>
      <name>Srinath Perera</name>
      <id>hemapani</id>
      <email>hemapani@apache.org</email>
      <organization></organization>
      <url>www.apache.org/~hemapani</url>
     </developer>
    <developer>
      <name>Eran Chinthaka</name>
      <id>chinthaka</id>
      <email>chinthaka@apache.org</email>
      <organization>LSF / Eurocenter DDC</organization>
      <url>www.apache.org/~chinthaka</url>
    </developer>
    <developer>
      <name>Dasarath Weerathunga</name>
      <id>dasarath</id>
      <email>dasarath@opensource.lk</email>
      <organization>LSF</organization>
    </developer>
    <developer>
      <name>Jaliya Ekanayake</name>
      <id>jaliya</id>
      <email>jaliya@opensource.lk</email>
      <organization>Virtusa / LSF</organization>
      <url>www.apache.org/~jaliya</url>
    </developer>
    <developer>
      <name>Chathura Herath</name>
      <id>chathura</id>
      <email>chathura@opensource.lk</email>
      <organization>LSF/MIT</organization>
      <url>www.apache.org/~chathura</url>
    </developer>
    <developer>
	  <name>Deepal Jayasinghe</name>
      <id>deepal</id>
      <email>deepal@apache.org</email>
      <organization>LSF</organization>
    </developer>
    <developer>
      <name>Ajith Ranabahu</name>
      <id>ajith</id>
      <email>ajith@apache.org</email>
      <organization>LSF</organization>
    </developer>
    <developer>
      <name>Changshin Lee</name>
      <id>ias</id>
      <email>iasandcb@hotmail.com</email>
      <organization>Tmax Soft, Korea</organization>
    </developer>
    <developer>
      <name>Rajith Priyanga</name>
      <id>priyanga</id>
      <email>priyanga@opensource.lk</email>
      <organization>LSF</organization>
    </developer>
  </developers>

  
  
  <!-- build information for the project -->
  <build>
    <nagEmailAddress>axis-dev@ws.apache.org</nagEmailAddress>
    <sourceDirectory>src/java</sourceDirectory>
    <unitTestSourceDirectory>src/test</unitTestSourceDirectory>

    <unitTest>
    
      <excludes>
        <exclude>**/*Abstract*.java</exclude>
	    <exclude>**/*Util*.java</exclude>
		<exclude>**/*MessageWithServerTest.java</exclude> 
		<!-- <exclude>**/*TransportDeploymentTest.java</exclude>  -->
		<!-- <exclude>**/*BuildERWithDeploymentTest.java</exclude>  -->
      </excludes>
     <includes>
        <include>**/*Test.java</include>
      </includes> 
      
     <resources>
         <resource>
             <directory>${basedir}/src/test-resources</directory>
          </resource>
          <resource>
        	<directory>conf</directory>
       			 <includes>
          			<include>**/*.properties</include>
        		</includes>
      </resource>
      <resource>
        <directory>src/java</directory>
        <includes>
          	<include>**/*.properties</include>
          	<include>**/*.xml</include>
        </includes>
      </resource>
     </resources>
    </unitTest>
    
    <resources>
      <resource>
        <directory>conf</directory>
        <includes>
          <include>**/*.properties</include>
        </includes>
      </resource>
      <resource>
        <directory>src/java</directory>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </resource>
    </resources>
  </build>

 
    <!-- ======= -->
    <!-- Reports -->
    <!-- ======= -->

    <!-- reports>
        <report>maven-license-plugin</report>
        <report>maven-checkstyle-plugin</report>
        <report>maven-pmd-plugin</report>
        <report>maven-jdepend-plugin</report>
        <report>maven-jxr-plugin</report>
        <report>maven-javadoc-plugin</report>
        <report>maven-junit-report-plugin</report>
        <report>maven-clover-plugin</report>
    </reports -->
    
</project>

