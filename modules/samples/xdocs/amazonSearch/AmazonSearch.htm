<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body>
<h3><strong>SOAP based AXIS Client for Amazon Search </strong></h3>
<p><strong>Introduction </strong></p>
<p>This is a client that used to perform Amazon search. It facilitates user to enter words as query parameters in the given TextField of the GUI and in a moment is shows the search results in the TextPane of the GUI. The most special feature of this client is, when user press space after typing a word it starts searching for that word and displays the results while the user types the next word. This feature is obtained by using the InvokeNonBlocking operation of Axis2. </p>
<p><strong>Getting Started </strong></p>
<p>Amazon search operation is done by means of Amazon Web API. (You can learn more and create your own account in Amazon Web API here <a href="http://www.amazon.com/gp/aws/registration/registration-form.html">http://www.amazon.com/gp/aws/registration/registration-form.html </a> ). If you need to build your own client using this Web API, first you should have license key. You can get the license key at Amazon Web API page. Only one key is generated for each email address. Then you have to download the WSDL file which has described the web service. Finally you can build your own SOAP based clients. </p>
<p>When you work with this client, you can use the given license key with this release (You can find the license key at Modules/samples/key.properties file). But it is convenient for you to get a license key for you. </p>
<p>To use this client you have to compile and build the jars. You can do this with Maven. All you have to do is go to Modules/Samples and type maven in the command prompt. This will compile and will build all the jars required. Then you can run this code using ANT. After building with maven, type the command “ant AmazonSearch” in the command prompt. Then you can see the GUI. </p>
<p><strong>Operation </strong></p>
<p>Now you can do Amazon search. Just type the word you want to search in the small textField in the GUI. After you press enter or space, client starts the searching and you can see the results displaying in few seconds. But this client is using the default license key. If you have got your own license key, you can set it by Set-&gt;key menu command. Then your key is saved in a property file permanently and from that onward it is using your key to access the Amazon Web API. </p>
<p>You can also set the number of results per page from the set menu. Maximum is 1000 results. </p>
<p>Architecture of the code </p>
<p>This client is build from five classes. </p>
<ol>
  <li>AsynchronousCleint:- This class is responsible for sending requests, </li>
  <li>ClientUtil:- Build the soap envelope and the messageContext; </li>
  <li>ClientCallbackHandler:- receives the response messages and process it to extract the required content. </li>
  <li>LinkFollower:- Listening to the hyperlink events and produce new windows to open relevant URLs. </li>
  <li>GUIHandler:- Build &amp; Show GUI, Listnening to the events in the GUI,</li>
  <li></li>
</ol>
<p><img src="untitled.JPG" width="550" height="384"></p>
<p>The main method is inside the AsynchronousClient class. First it objects of LinkFollower and GUIHandler and set them as threads. Later you will understand why do we need those. Then the main program calls to the GUIHandler to display the GUI. After that, the program is running according to the events fired by the GUI. KeyListner is listening to the characters typed in the textField. When it detects a space or Enter key pressing, it sets the flag “doSearch”. Then a thread will soon detect it and reset it and send a request to search for that word. It don't use much time to send a request, but here it's done by a separate thread because it's important to isolate the GUI from internal actions. Then the user never gets interrupted in anyway. So the user can type the query terms continuously on the GUI while the program do the search for the query terms that already typed by the user and displays the results. </p>
<p>The use of the other thread comes when the user click on a hyperlink. Then the program should open the URL in a new window. That consumes little bit time. So a separate thread is used for that. That's how we need that LinkFollower object as a Thead. </p>
<p>Now we have two threads, one is for preparing and sending the soap request without interrupting the user and other is to open new windows for clicked urls. But there is another important action. That is processing the received response and displaying the results. That is done in the ClientCallbackHandler. This is a important feature of InvokeNonBlocking operation of Axis2. It let you to have an additional thread in the callbackHandler class. All you have to do is sending an object of that class as a parameter when you send the message. How it is done in the programme is as follows. </p>
<p><code>call.invokeNonBlocking(opdesc, requestContext, new ClientEchoCallbackHandler()); </code></p>
<p><code><dfn>opDesc – is a QName which caries the operation name and relevant namespace. </dfn></code></p>
<p><dfn><code>requestContext – is a MessageContext that holds the request soap envelope. </code></dfn></p>
<p><dfn><code>ClientEchoCallbackHandler – is a class that receives the response soap envelope.</code></dfn><code> </code></p>
<p>Briefly it is client thread is just sending the requests and do not wait for the response. So this client can send any amount of request sequentially irrespective of whether the responses are received or not. ClientEchoCallbackHandler is responsible for receiving response message and process it. It extracts the required details from the message and display it in the TextPane of the GUI. </p>
<p>The request soap message is built at the ClientUtil class. According to the Amazon Web API wsdl file, required namespaces are selected and attached to the envelope. We don't have to include anything in the header. The name of the first child element of the body should be operation name and it should be namespace qualified. We also have to include the binding namespace to this element. Here it is attached as an attribute to that element, </p>
<p><code>OMElement opration = omFactory.createOMElement(&quot;doAmazonSearch&quot;, &quot;urn:AmazonSearch&quot;, &quot;ns1&quot;); </code></p>
<p><code>opration.addAttribute(&quot;SOAP-ENV:encordingStyle&quot;, &quot;http://schemas.xmlsoap.org/soap/encoding/&quot;, null); </code></p>
<p>All the child elements of the axisOperation element are carrying required parameters such as license key, query terms, results per page, etc. (for more information, click <a href="http://www.amazon.com/gp/aws/sdk/102-7878352-1385727?s=AlexaWebInfoService&v=1%2d0%20" target="_blank">here</a>), </p>
<p><samp>&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:tns=&quot;http://webservices.amazon.com/AWSAlexa/2005-02-01&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/1999/XMLSchema-instance/&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:wsdl=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;<br>
&lt;soapenv:Header&gt;&lt;/soapenv:Header&gt;<br>
&lt;soapenv:Body&gt;<br>
&lt;tns:Search&gt;<br>
&lt;SubscriptionId xmlns=&quot;&quot;&gt;0Y6WJGPB6TW8AVAHGFR2&lt;/SubscriptionId&gt;<br>
&lt;Request xmlns=&quot;&quot;&gt;<br>
&lt;ResponseGroup&gt;Web&lt;/ResponseGroup&gt;<br>
&lt;Query&gt;axis&lt;/Query&gt;<br>
&lt;Count&gt;2&lt;/Count&gt;<br>
&lt;IgnoreWords&gt;90&lt;/IgnoreWords&gt;<br>
&lt;AdultFilter&gt;yes&lt;/AdultFilter&gt;<br>
&lt;/Request&gt;<br>
&lt;/tns:Search&gt;<br>
&lt;/soapenv:Body&gt;<br>
&lt;/soapenv:Envelope&gt;</samp></p>
<p>ClientCallbackHandler processing response soap and extract elements which have the local name as &quot;NavigableURL&quot;. It has to work with Object Model(OM). You can notice that it uses several Iterators to go through the children of an OMElement. You are returned and Object from the Iterator that can be casted to a OMNode. Since you can't call for the children of an OMNode we have to cast it to a OMElement. Before that we have to check it whether it is an OMElement, as follows. </p>
<p><code>Iterator iterator0 = axisOperation.getChildren(); </code></p>
<p><code>while (iterator0.hasNext()) { </code></p>
<p><code>OMNode node = (OMNode) iterator0.next(); </code></p>
<p><code>if (node.getType() == OMNode.ELEMENT_NODE) { </code></p>
<p><code>OMElement elem = (OMElement) node; </code></p>
<p>The response soap message is as follows, it is contains just two search results. </p>
<p> <samp>&lt;SOAP-ENV:</samp></p>
<p><samp>Envelope xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/e<br>
  nvelope/&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XML
  Schema&quot;&gt;<br>
&lt;SOAP-ENV:Body&gt;<br>
&lt;SearchResponse xmlns=&quot;http://webservices.amazon.com/AWSAlexa/2005-02-01&quot;&gt;<br>
&lt;OperationRequest&gt;<br>
&lt;RequestId&gt;03YF6QNSD5A04HQM1QMR&lt;/RequestId&gt;<br>
&lt;/
OperationRequest&gt;<br>
&lt;SearchResult&gt;<br>
&lt;Request&gt;
&lt;IsValid&gt;True&lt;/IsValid&gt;
&lt;/Request&gt;</samp></p>
<p><samp>&lt;Alexa&gt;<br>
&lt;WebSearch&gt;<br>
&lt;SearchPhrase&gt;gayan&lt;/SearchPhrase&gt;<br>
&lt;TotalCount&gt;32376&lt;/TotalCount&gt;<br>
&lt;Results&gt;</samp></p>
<blockquote>
  <p><samp>&lt;Result&gt;<br>
&lt;DataUrl type=&quot;navigable&quot;&gt;http://twexus.com/&lt;/DataUrl&gt;<br>
&lt;NavigableUrl&gt;
    http://twexus.com/&lt;/NavigableUrl&gt;<br>
&lt;Number&gt;1&lt;/Number&gt;<br>
&lt;Title&gt;Images: Tuesday, May 2
              4, 2005&lt;/Title&gt;<br>
&lt;Score&gt;71060&lt;/Score&gt;<br>
&lt;CrawlData&gt;<br>
&lt;Size&gt;58014&lt;/Size&gt;<br>
&lt;MD5Checksum&gt;65e
              f724f051197d43fc64e70d5a14d9d&lt;/MD5Checksum&gt;<br>
&lt;/CrawlData&gt;<br>
&lt;/Result&gt;</samp></p>
  <p><samp>&lt;Result&gt;<br>
&lt;DataUrl
                  type=&quot;navigable&quot;&gt;http://www.live365.com/stations/toonsee&lt;/DataUrl&gt;<br>
&lt;NavigableUrl&gt;http://www.live365.com/stations/toonsee&lt;/NavigableUrl&gt;<br>
&lt;Number&gt;2&lt;/Number&gt;<br>
&lt;Title&gt;<br>
Online African Radio Station - Live365 Internet Radio - Arabix&lt;/Title&gt;<br>
&lt;Score&gt;709<br>
87&lt;/Score&gt;<br>
&lt;CrawlData&gt;<br>
&lt;Size&gt;32174&lt;/Size&gt;<br>
&lt;MD5Checksum&gt;67c7979db66ee2e3ec197f0ec583
            9e3a&lt;/MD5Checksum&gt;<br>
&lt;/CrawlData&gt;<br>
&lt;/Result&gt;
  </samp></p>
</blockquote>
<p><samp><br>
&lt;/Results&gt;<br>
&lt;/WebSearch&gt;<br>
&lt;/Alexa&gt;<br>
&lt;/SearchResult&gt;<br>
&lt;/SearchResponse&gt;<br>
&lt;/SOAP-ENV:Body&gt;<br>
&lt;/SOAP-ENV:Envelope&gt;</samp></p>
<p>&nbsp;</p>
<p><strong>Extending the Client </strong></p>
<p>If you observe the WSDL file of the Amazon API, you can find two more operations other than “doAmazonSearch”. Those are </p>
<ul>
  <ul>
    <li><a href="http://www.amazon.com/gp/aws/sdk/main.html?s=AlexaWebInfoService&v=1-0&p=ApiReference/CategoryOperation">Category </a></li>
    <li><a href="http://www.amazon.com/gp/aws/sdk/main.html?s=AlexaWebInfoService&v=1-0&p=ApiReference/CrawlOperation">Crawl </a></li>
    <li><a href="http://www.amazon.com/gp/aws/sdk/main.html?s=AlexaWebInfoService&v=1-0&p=ApiReference/UrlInfoOperation">UrlInfo </a></li>
    <li><a href="http://www.amazon.com/gp/aws/sdk/main.html?s=AlexaWebInfoService&v=1-0&p=ApiReference/WebMapOperation">WebMap </a></li>
  </ul>
</ul>
<p> You can extend this program to work these operations too. Because the soap requests and responses are different, it will need separate ClientUtil classes and ClientCallbackHandler classes to fulfill this task. Anyway you can define those classes with any name and the only condition is when you invoke the axisOperation you have to send an object of relevant CallbackHandler class and it should extend the CallbackHandler too. </p>
<p>&nbsp; </p>
<p>&nbsp; </p>
<p>&nbsp; </p>
</body>
</html>
